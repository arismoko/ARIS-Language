//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ari/Desktop/C# Projects/ARISL/antlrfiles/Arisl.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ArislParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, PRIVATE=116, PUBLIC=117, GLOBAL=118, IDENTIFIER=119, 
		NUMBER=120, COMMA=121, TYPETOKEN=122, PARENTHESISOPEN=123, PARENTHESISCLOSE=124, 
		STRING=125, LINE_COMMENT=126, BLOCK_COMMENT=127, WS=128;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_delegateDecl = 2, RULE_recordDecl = 3, 
		RULE_functionDecl = 4, RULE_repeatUntilStatement = 5, RULE_classDecl = 6, 
		RULE_constructorDecl = 7, RULE_structDecl = 8, RULE_enumDecl = 9, RULE_interfaceDecl = 10, 
		RULE_ifStatement = 11, RULE_whileStatement = 12, RULE_forStatement = 13, 
		RULE_forEachStatement = 14, RULE_returnStatement = 15, RULE_operatorOverloadStatement = 16, 
		RULE_objectCreation = 17, RULE_interfaceBlock = 18, RULE_interfaceMember = 19, 
		RULE_functionSignature = 20, RULE_block = 21, RULE_list = 22, RULE_expressionStatement = 23, 
		RULE_expression = 24, RULE_primary = 25, RULE_tuple = 26, RULE_arguments = 27, 
		RULE_param = 28, RULE_prefix = 29, RULE_unaryOP = 30, RULE_methodCall = 31, 
		RULE_tableCall = 32, RULE_literal = 33, RULE_binaryOp = 34, RULE_tryCatchStatement = 35, 
		RULE_switchStatement = 36, RULE_caseBlock = 37, RULE_defaultBlock = 38, 
		RULE_modifier = 39, RULE_visibility = 40, RULE_type = 41, RULE_varType = 42, 
		RULE_simpleType = 43, RULE_tupleType = 44, RULE_genericType = 45, RULE_nestedType = 46, 
		RULE_castType = 47, RULE_end = 48;
	public static readonly string[] ruleNames = {
		"program", "statement", "delegateDecl", "recordDecl", "functionDecl", 
		"repeatUntilStatement", "classDecl", "constructorDecl", "structDecl", 
		"enumDecl", "interfaceDecl", "ifStatement", "whileStatement", "forStatement", 
		"forEachStatement", "returnStatement", "operatorOverloadStatement", "objectCreation", 
		"interfaceBlock", "interfaceMember", "functionSignature", "block", "list", 
		"expressionStatement", "expression", "primary", "tuple", "arguments", 
		"param", "prefix", "unaryOP", "methodCall", "tableCall", "literal", "binaryOp", 
		"tryCatchStatement", "switchStatement", "caseBlock", "defaultBlock", "modifier", 
		"visibility", "type", "varType", "simpleType", "tupleType", "genericType", 
		"nestedType", "castType", "end"
	};

	private static readonly string[] _LiteralNames = {
		null, "'delegate'", "'record'", "'func'", "'repeat'", "'until'", "'class'", 
		"':'", "'@'", "'struct'", "'enum'", "'interface'", "'if'", "'else if'", 
		"'else'", "'while'", "'for'", "'foreach'", "'in'", "'return'", "'operator'", 
		"'create'", "'{'", "'}'", "'|'", "'...'", "'!'", "'-'", "'++'", "'--'", 
		"'['", "']'", "'true'", "'false'", "'null'", "'^='", "'^'", "'*='", "'*'", 
		"'/='", "'/'", "'%='", "'%'", "'+='", "'+'", "'-='", "'=='", "'!='", "'<='", 
		"'<'", "'>='", "'>'", "'='", "'not'", "'&&'", "'and'", "'||'", "'or'", 
		"'|||'", "'::'", "'.'", "'??'", "'=>'", "'->'", "'<-'", "'<<'", "'>>'", 
		"'>>>'", "'<<='", "'>>='", "'>>>='", "'is'", "'try'", "'catch'", "'finally'", 
		"'switch'", "'case'", "'default'", "'static'", "'instantiated'", "'abstract'", 
		"'final'", "'override'", "'virtual'", "'sealed'", "'volatile'", "'readonly'", 
		"'const'", "'new'", "'ref'", "'out'", "'tbl'", "'async'", "'let'", "'select'", 
		"'where'", "'group'", "'into'", "'orderby'", "'join'", "'equals'", "'on'", 
		"'from'", "'ascending'", "'descending'", "'fixed'", "'unsafe'", "'checked'", 
		"'unchecked'", "'await'", "'~~'", "'<~'", "';'", "'~*~'", "'<*~'", "'~*>'", 
		"'private'", "'public'", "'global'", null, null, "','", "'~'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "PRIVATE", "PUBLIC", "GLOBAL", 
		"IDENTIFIER", "NUMBER", "COMMA", "TYPETOKEN", "PARENTHESISOPEN", "PARENTHESISCLOSE", 
		"STRING", "LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Arisl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ArislParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ArislParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ArislParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30290190174L) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 12930806498459593L) != 0)) {
				{
				{
				State = 98;
				statement();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl() {
			return GetRuleContext<StructDeclContext>(0);
		}
		public StructDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterStructDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitStructDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectCreationContext objectCreation() {
			return GetRuleContext<ObjectCreationContext>(0);
		}
		public ObjectCreationStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterObjectCreationStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitObjectCreationStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclContext interfaceDecl() {
			return GetRuleContext<InterfaceDeclContext>(0);
		}
		public InterfaceDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public ForStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterForStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitForStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DelegateDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelegateDeclContext delegateDecl() {
			return GetRuleContext<DelegateDeclContext>(0);
		}
		public DelegateDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterDelegateDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitDelegateDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public FunctionDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterFunctionDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitFunctionDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		public ClassDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterClassDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitClassDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatUntilStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepeatUntilStatementContext repeatUntilStatement() {
			return GetRuleContext<RepeatUntilStatementContext>(0);
		}
		public RepeatUntilStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterRepeatUntilStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitRepeatUntilStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatUntilStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IfStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterIfStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitIfStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclContext constructorDecl() {
			return GetRuleContext<ConstructorDeclContext>(0);
		}
		public ConstructorDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterConstructorDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitConstructorDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclContext recordDecl() {
			return GetRuleContext<RecordDeclContext>(0);
		}
		public RecordDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterRecordDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitRecordDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ExpressionStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterExpressionStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitExpressionStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public WhileStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterWhileStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitWhileStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public SwitchStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterSwitchStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitSwitchStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public ForEachStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterForEachStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitForEachStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryCatchStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TryCatchStatementContext tryCatchStatement() {
			return GetRuleContext<TryCatchStatementContext>(0);
		}
		public TryCatchStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTryCatchStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTryCatchStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ReturnStatementIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterReturnStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitReturnStatementID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatementID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumDeclIDContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		public EnumDeclIDContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterEnumDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitEnumDeclID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new FunctionDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				functionDecl();
				}
				break;
			case 2:
				_localctx = new DelegateDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				delegateDecl();
				}
				break;
			case 3:
				_localctx = new ConstructorDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				constructorDecl();
				}
				break;
			case 4:
				_localctx = new ClassDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 107;
				classDecl();
				}
				break;
			case 5:
				_localctx = new StructDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 108;
				structDecl();
				}
				break;
			case 6:
				_localctx = new RecordDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 109;
				recordDecl();
				}
				break;
			case 7:
				_localctx = new EnumDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 110;
				enumDecl();
				}
				break;
			case 8:
				_localctx = new InterfaceDeclIDContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 111;
				interfaceDecl();
				}
				break;
			case 9:
				_localctx = new IfStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 112;
				ifStatement();
				}
				break;
			case 10:
				_localctx = new WhileStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 113;
				whileStatement();
				}
				break;
			case 11:
				_localctx = new ForStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 114;
				forStatement();
				}
				break;
			case 12:
				_localctx = new ForEachStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 115;
				forEachStatement();
				}
				break;
			case 13:
				_localctx = new ReturnStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 116;
				returnStatement();
				}
				break;
			case 14:
				_localctx = new ObjectCreationStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 117;
				objectCreation();
				}
				break;
			case 15:
				_localctx = new TryCatchStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 118;
				tryCatchStatement();
				}
				break;
			case 16:
				_localctx = new RepeatUntilStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 119;
				repeatUntilStatement();
				}
				break;
			case 17:
				_localctx = new SwitchStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 120;
				switchStatement();
				}
				break;
			case 18:
				_localctx = new ExpressionStatementIDContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 121;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DelegateDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterDelegateDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitDelegateDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateDeclContext delegateDecl() {
		DelegateDeclContext _localctx = new DelegateDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_delegateDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 124;
				visibility();
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 127;
				modifier();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 133;
				type();
				}
			}

			State = 136;
			Match(T__0);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPETOKEN) {
				{
				State = 137;
				genericType();
				}
			}

			State = 140;
			Match(IDENTIFIER);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESISOPEN) {
				{
				State = 141;
				arguments();
				}
			}

			State = 144;
			end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public RecordDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterRecordDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitRecordDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordDeclContext recordDecl() {
		RecordDeclContext _localctx = new RecordDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_recordDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 146;
				visibility();
				}
			}

			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 149;
				modifier();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 155;
				type();
				}
			}

			State = 158;
			Match(T__1);
			State = 159;
			Match(IDENTIFIER);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 160;
				arguments();
				}
				break;
			}
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 163;
				block();
				}
				break;
			}
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0)) {
				{
				State = 166;
				end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 169;
				visibility();
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 172;
				modifier();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 178;
				type();
				}
			}

			State = 181;
			Match(T__2);
			State = 182;
			Match(IDENTIFIER);
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 183;
				genericType();
				}
				break;
			}
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 186;
				arguments();
				}
				break;
			}
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 189;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatUntilStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntilStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterRepeatUntilStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitRepeatUntilStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatUntilStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilStatementContext repeatUntilStatement() {
		RepeatUntilStatementContext _localctx = new RepeatUntilStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_repeatUntilStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__3);
			State = 193;
			block();
			State = 194;
			Match(T__4);
			State = 195;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 197;
				visibility();
				}
			}

			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 200;
				modifier();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			Match(T__5);
			State = 207;
			Match(IDENTIFIER);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 208;
				Match(T__6);
				State = 209;
				type();
				}
			}

			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 212;
				block();
				}
				break;
			}
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0)) {
				{
				State = 215;
				end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ConstructorDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterConstructorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitConstructorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclContext constructorDecl() {
		ConstructorDeclContext _localctx = new ConstructorDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_constructorDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 218;
				visibility();
				}
			}

			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 221;
				modifier();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			Match(T__7);
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 228;
				arguments();
				}
				break;
			}
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 231;
				block();
				}
				break;
			}
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0)) {
				{
				State = 234;
				end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitStructDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 237;
				visibility();
				}
			}

			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 240;
				modifier();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(T__8);
			State = 247;
			Match(IDENTIFIER);
			State = 248;
			block();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0)) {
				{
				State = 249;
				end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 252;
				visibility();
				}
			}

			State = 255;
			Match(T__9);
			State = 256;
			Match(IDENTIFIER);
			State = 257;
			list();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0)) {
				{
				State = 258;
				end();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBlockContext interfaceBlock() {
			return GetRuleContext<InterfaceBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public InterfaceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclContext interfaceDecl() {
		InterfaceDeclContext _localctx = new InterfaceDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_interfaceDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 261;
				visibility();
				}
			}

			State = 264;
			Match(T__10);
			State = 265;
			Match(IDENTIFIER);
			State = 266;
			interfaceBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__11);
			State = 269;
			expression(0);
			State = 270;
			block();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 271;
				Match(T__12);
				State = 272;
				expression(0);
				State = 273;
				block();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 280;
				Match(T__13);
				State = 281;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(T__14);
			State = 285;
			expression(0);
			State = 286;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(T__15);
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 289;
				type();
				}
				break;
			}
			State = 292;
			expression(0);
			State = 293;
			end();
			State = 294;
			expression(0);
			State = 295;
			end();
			State = 296;
			expression(0);
			State = 297;
			end();
			State = 298;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_forEachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__16);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 301;
				type();
				}
			}

			State = 304;
			Match(IDENTIFIER);
			State = 305;
			Match(T__17);
			State = 306;
			expression(0);
			State = 307;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(T__18);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30287331328L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 200119706189823L) != 0)) {
				{
				State = 310;
				expression(0);
				}
			}

			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 313;
				end();
				}
				}
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOverloadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public OperatorOverloadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOverloadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterOperatorOverloadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitOperatorOverloadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOverloadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOverloadStatementContext operatorOverloadStatement() {
		OperatorOverloadStatementContext _localctx = new OperatorOverloadStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_operatorOverloadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 318;
				visibility();
				}
			}

			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 321;
				modifier();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 327;
				type();
				}
			}

			State = 330;
			Match(T__19);
			State = 331;
			binaryOp();
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESISOPEN) {
				{
				State = 332;
				arguments();
				}
			}

			State = 335;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		public ObjectCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationContext objectCreation() {
		ObjectCreationContext _localctx = new ObjectCreationContext(Context, State);
		EnterRule(_localctx, 34, RULE_objectCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(T__20);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 338;
				visibility();
				}
			}

			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 341;
				modifier();
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 347;
			type();
			State = 348;
			Match(IDENTIFIER);
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESISOPEN) {
				{
				State = 349;
				tuple();
				}
			}

			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 352;
				list();
				}
			}

			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 355;
				end();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberContext[] interfaceMember() {
			return GetRuleContexts<InterfaceMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberContext interfaceMember(int i) {
			return GetRuleContext<InterfaceMemberContext>(i);
		}
		public InterfaceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBlockContext interfaceBlock() {
		InterfaceBlockContext _localctx = new InterfaceBlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_interfaceBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(T__21);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12801L) != 0)) {
				{
				{
				State = 361;
				interfaceMember();
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 367;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		public InterfaceMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterInterfaceMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitInterfaceMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberContext interfaceMember() {
		InterfaceMemberContext _localctx = new InterfaceMemberContext(Context, State);
		EnterRule(_localctx, 38, RULE_interfaceMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 371;
				type();
				}
			}

			State = 374;
			Match(IDENTIFIER);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESISOPEN) {
				{
				State = 375;
				arguments();
				}
			}

			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 378;
				end();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(T__21);
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30290190174L) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 12930806498459593L) != 0)) {
				{
				{
				State = 384;
				statement();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 390;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 44, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(T__23);
			State = 393;
			expression(0);
			State = 394;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext[] end() {
			return GetRuleContexts<EndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end(int i) {
			return GetRuleContext<EndContext>(i);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) {
				{
				State = 396;
				visibility();
				}
			}

			State = 399;
			expression(0);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 400;
				end();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext[] binaryOp() {
			return GetRuleContexts<BinaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp(int i) {
			return GetRuleContext<BinaryOpContext>(i);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISOPEN() { return GetToken(ArislParser.PARENTHESISOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISCLOSE() { return GetToken(ArislParser.PARENTHESISCLOSE, 0); }
		public ParenthesisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext[] prefix() {
			return GetRuleContexts<PrefixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix(int i) {
			return GetRuleContext<PrefixContext>(i);
		}
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOPContext[] unaryOP() {
			return GetRuleContexts<UnaryOPContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOPContext unaryOP(int i) {
			return GetRuleContext<UnaryOPContext>(i);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
					{
					{
					State = 406;
					modifier();
					}
					}
					State = 411;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 413;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 412;
					type();
					}
					break;
				}
				State = 415;
				primary();
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(PARENTHESISOPEN);
				State = 417;
				expression(0);
				State = 418;
				Match(PARENTHESISCLOSE);
				}
				break;
			case 3:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 421;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 420;
						prefix();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 423;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 425;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 429;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 433;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 430;
								binaryOp();
								State = 431;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 435;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 2:
						{
						_localctx = new UnaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 437;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 439;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 438;
								unaryOP();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 441;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListPrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListPrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterListPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitListPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierPrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		public IdentifierPrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterIdentifierPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitIdentifierPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableCallPrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableCallContext tableCall() {
			return GetRuleContext<TableCallContext>(0);
		}
		public TableCallPrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTableCallPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTableCallPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableCallPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypePrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public GenericTypePrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterGenericTypePrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitGenericTypePrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypePrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockPrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockPrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterBlockPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitBlockPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TuplePrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TuplePrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTuplePrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTuplePrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralPrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralPrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterLiteralPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitLiteralPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypePrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypePrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTypePrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTypePrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallPrimaryContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodCallPrimaryContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterMethodCallPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitMethodCallPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_primary);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new LiteralPrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 448;
				literal();
				}
				break;
			case 2:
				_localctx = new TuplePrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				tuple();
				}
				break;
			case 3:
				_localctx = new IdentifierPrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 450;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				_localctx = new MethodCallPrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 451;
				methodCall();
				}
				break;
			case 5:
				_localctx = new TableCallPrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 452;
				tableCall();
				}
				break;
			case 6:
				_localctx = new BlockPrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 453;
				block();
				}
				break;
			case 7:
				_localctx = new ListPrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 454;
				list();
				}
				break;
			case 8:
				_localctx = new GenericTypePrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 455;
				genericType();
				}
				break;
			case 9:
				_localctx = new TypePrimaryContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 456;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISOPEN() { return GetToken(ArislParser.PARENTHESISOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISCLOSE() { return GetToken(ArislParser.PARENTHESISCLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArislParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ArislParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 52, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(PARENTHESISOPEN);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30287331328L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 200119706189823L) != 0)) {
				{
				State = 460;
				expression(0);
				}
			}

			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 463;
				Match(COMMA);
				State = 464;
				expression(0);
				}
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 470;
			Match(PARENTHESISCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	 
		public ArgumentsContext() { }
		public virtual void CopyFrom(ArgumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgsContext : ArgumentsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISOPEN() { return GetToken(ArislParser.PARENTHESISOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISCLOSE() { return GetToken(ArislParser.PARENTHESISCLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ArgsContext(ArgumentsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarArgsContext : ArgumentsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISOPEN() { return GetToken(ArislParser.PARENTHESISOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISCLOSE() { return GetToken(ArislParser.PARENTHESISCLOSE, 0); }
		public VarArgsContext(ArgumentsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterVarArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitVarArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 54, RULE_arguments);
		int _la;
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new VarArgsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				Match(PARENTHESISOPEN);
				State = 473;
				Match(T__24);
				State = 474;
				Match(PARENTHESISCLOSE);
				}
				break;
			case 2:
				_localctx = new ArgsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				Match(PARENTHESISOPEN);
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 54984171323391L) != 0)) {
					{
					{
					State = 476;
					param();
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 482;
				Match(PARENTHESISCLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ArislParser.COMMA, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 56, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) {
				{
				{
				State = 485;
				modifier();
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
				{
				State = 491;
				type();
				}
			}

			State = 494;
			Match(IDENTIFIER);
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 495;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixContext : ParserRuleContext {
		public PrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixContext prefix() {
		PrefixContext _localctx = new PrefixContext(Context, State);
		EnterRule(_localctx, 58, RULE_prefix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_la = TokenStream.LA(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOPContext : ParserRuleContext {
		public UnaryOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterUnaryOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitUnaryOP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOPContext unaryOP() {
		UnaryOPContext _localctx = new UnaryOPContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			_la = TokenStream.LA(1);
			if ( !(_la==T__27 || _la==T__28) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 62, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(IDENTIFIER);
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPETOKEN) {
				{
				State = 503;
				genericType();
				}
			}

			State = 506;
			tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TableCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTableCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTableCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableCallContext tableCall() {
		TableCallContext _localctx = new TableCallContext(Context, State);
		EnterRule(_localctx, 64, RULE_tableCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(IDENTIFIER);
			State = 509;
			Match(T__29);
			State = 510;
			expression(0);
			State = 511;
			Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ArislParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArislParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 66, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0) || _la==NUMBER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ArislParser.COMMA, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 68, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -34225520640L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 144115188075856127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryCatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ArislParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ArislParser.IDENTIFIER, i);
		}
		public TryCatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryCatchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTryCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTryCatchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryCatchStatementContext tryCatchStatement() {
		TryCatchStatementContext _localctx = new TryCatchStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_tryCatchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(T__71);
			State = 518;
			block();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__72) {
				{
				{
				State = 519;
				Match(T__72);
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 12289L) != 0)) {
					{
					State = 520;
					type();
					State = 521;
					Match(IDENTIFIER);
					}
				}

				State = 525;
				block();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__73) {
				{
				State = 531;
				Match(T__73);
				}
			}

			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 534;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(T__74);
			State = 538;
			expression(0);
			State = 539;
			Match(T__21);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__75) {
				{
				{
				State = 540;
				caseBlock();
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__76) {
				{
				State = 546;
				defaultBlock();
				}
			}

			State = 549;
			Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(T__75);
			State = 552;
			expression(0);
			State = 553;
			Match(T__6);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30290190174L) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 12930806498459593L) != 0)) {
				{
				{
				State = 554;
				statement();
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(T__76);
			State = 561;
			Match(T__6);
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30290190174L) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 12930806498459593L) != 0)) {
				{
				{
				State = 562;
				statement();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 4294967295L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(ArislParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ArislParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(ArislParser.GLOBAL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 80, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarTypeContext varType() {
			return GetRuleContext<VarTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_type);
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				simpleType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				genericType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574;
				tupleType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575;
				nestedType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 576;
				castType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 577;
				varType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarTypeContext : ParserRuleContext {
		public VarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterVarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitVarType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarTypeContext varType() {
		VarTypeContext _localctx = new VarTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_varType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(T__109);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPETOKEN() { return GetToken(ArislParser.TYPETOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ArislParser.IDENTIFIER, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_simpleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(TYPETOKEN);
			State = 583;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPETOKEN() { return GetToken(ArislParser.TYPETOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_tupleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(TYPETOKEN);
			State = 586;
			tuple();
			State = 587;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPETOKEN() { return GetToken(ArislParser.TYPETOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ArislParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ArislParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ArislParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ArislParser.COMMA, i);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_genericType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(TYPETOKEN);
			State = 590;
			Match(IDENTIFIER);
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 591;
				Match(COMMA);
				State = 592;
				Match(IDENTIFIER);
				}
				}
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 598;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public NestedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterNestedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitNestedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeContext nestedType() {
		NestedTypeContext _localctx = new NestedTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_nestedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			simpleType();
			State = 601;
			genericType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISOPEN() { return GetToken(ArislParser.PARENTHESISOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESISCLOSE() { return GetToken(ArislParser.PARENTHESISCLOSE, 0); }
		public CastTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterCastType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitCastType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastTypeContext castType() {
		CastTypeContext _localctx = new CastTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_castType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(PARENTHESISOPEN);
			State = 604;
			type();
			State = 605;
			Match(PARENTHESISCLOSE);
			State = 606;
			Match(T__110);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArislListener typedListener = listener as IArislListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArislVisitor<TResult> typedVisitor = visitor as IArislVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 96, RULE_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,128,611,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,5,0,100,
		8,0,10,0,12,0,103,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,3,1,123,8,1,1,2,3,2,126,8,2,1,2,5,2,129,8,2,10,
		2,12,2,132,9,2,1,2,3,2,135,8,2,1,2,1,2,3,2,139,8,2,1,2,1,2,3,2,143,8,2,
		1,2,1,2,1,3,3,3,148,8,3,1,3,5,3,151,8,3,10,3,12,3,154,9,3,1,3,3,3,157,
		8,3,1,3,1,3,1,3,3,3,162,8,3,1,3,3,3,165,8,3,1,3,3,3,168,8,3,1,4,3,4,171,
		8,4,1,4,5,4,174,8,4,10,4,12,4,177,9,4,1,4,3,4,180,8,4,1,4,1,4,1,4,3,4,
		185,8,4,1,4,3,4,188,8,4,1,4,3,4,191,8,4,1,5,1,5,1,5,1,5,1,5,1,6,3,6,199,
		8,6,1,6,5,6,202,8,6,10,6,12,6,205,9,6,1,6,1,6,1,6,1,6,3,6,211,8,6,1,6,
		3,6,214,8,6,1,6,3,6,217,8,6,1,7,3,7,220,8,7,1,7,5,7,223,8,7,10,7,12,7,
		226,9,7,1,7,1,7,3,7,230,8,7,1,7,3,7,233,8,7,1,7,3,7,236,8,7,1,8,3,8,239,
		8,8,1,8,5,8,242,8,8,10,8,12,8,245,9,8,1,8,1,8,1,8,1,8,3,8,251,8,8,1,9,
		3,9,254,8,9,1,9,1,9,1,9,1,9,3,9,260,8,9,1,10,3,10,263,8,10,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,276,8,11,10,11,12,11,279,
		9,11,1,11,1,11,3,11,283,8,11,1,12,1,12,1,12,1,12,1,13,1,13,3,13,291,8,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,3,14,303,8,14,1,14,
		1,14,1,14,1,14,1,14,1,15,1,15,3,15,312,8,15,1,15,4,15,315,8,15,11,15,12,
		15,316,1,16,3,16,320,8,16,1,16,5,16,323,8,16,10,16,12,16,326,9,16,1,16,
		3,16,329,8,16,1,16,1,16,1,16,3,16,334,8,16,1,16,1,16,1,17,1,17,3,17,340,
		8,17,1,17,5,17,343,8,17,10,17,12,17,346,9,17,1,17,1,17,1,17,3,17,351,8,
		17,1,17,3,17,354,8,17,1,17,4,17,357,8,17,11,17,12,17,358,1,18,1,18,5,18,
		363,8,18,10,18,12,18,366,9,18,1,18,1,18,1,19,1,19,1,20,3,20,373,8,20,1,
		20,1,20,3,20,377,8,20,1,20,4,20,380,8,20,11,20,12,20,381,1,21,1,21,5,21,
		386,8,21,10,21,12,21,389,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,3,23,
		398,8,23,1,23,1,23,4,23,402,8,23,11,23,12,23,403,1,24,1,24,5,24,408,8,
		24,10,24,12,24,411,9,24,1,24,3,24,414,8,24,1,24,1,24,1,24,1,24,1,24,1,
		24,4,24,422,8,24,11,24,12,24,423,1,24,1,24,3,24,428,8,24,1,24,1,24,1,24,
		1,24,4,24,434,8,24,11,24,12,24,435,1,24,1,24,4,24,440,8,24,11,24,12,24,
		441,5,24,444,8,24,10,24,12,24,447,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,3,25,458,8,25,1,26,1,26,3,26,462,8,26,1,26,1,26,5,26,466,
		8,26,10,26,12,26,469,9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,478,
		8,27,10,27,12,27,481,9,27,1,27,3,27,484,8,27,1,28,5,28,487,8,28,10,28,
		12,28,490,9,28,1,28,3,28,493,8,28,1,28,1,28,3,28,497,8,28,1,29,1,29,1,
		30,1,30,1,31,1,31,3,31,505,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,524,8,35,1,35,5,35,527,
		8,35,10,35,12,35,530,9,35,1,35,3,35,533,8,35,1,35,3,35,536,8,35,1,36,1,
		36,1,36,1,36,5,36,542,8,36,10,36,12,36,545,9,36,1,36,3,36,548,8,36,1,36,
		1,36,1,37,1,37,1,37,1,37,5,37,556,8,37,10,37,12,37,559,9,37,1,38,1,38,
		1,38,5,38,564,8,38,10,38,12,38,567,9,38,1,39,1,39,1,40,1,40,1,41,1,41,
		1,41,1,41,1,41,1,41,3,41,579,8,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,
		44,1,44,1,45,1,45,1,45,1,45,5,45,594,8,45,10,45,12,45,597,9,45,1,45,1,
		45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,0,1,48,49,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,0,
		7,1,0,26,27,1,0,28,29,3,0,32,34,120,120,125,125,3,0,27,27,35,71,121,121,
		2,0,18,18,78,109,1,0,116,118,1,0,112,115,673,0,101,1,0,0,0,2,122,1,0,0,
		0,4,125,1,0,0,0,6,147,1,0,0,0,8,170,1,0,0,0,10,192,1,0,0,0,12,198,1,0,
		0,0,14,219,1,0,0,0,16,238,1,0,0,0,18,253,1,0,0,0,20,262,1,0,0,0,22,268,
		1,0,0,0,24,284,1,0,0,0,26,288,1,0,0,0,28,300,1,0,0,0,30,309,1,0,0,0,32,
		319,1,0,0,0,34,337,1,0,0,0,36,360,1,0,0,0,38,369,1,0,0,0,40,372,1,0,0,
		0,42,383,1,0,0,0,44,392,1,0,0,0,46,397,1,0,0,0,48,427,1,0,0,0,50,457,1,
		0,0,0,52,459,1,0,0,0,54,483,1,0,0,0,56,488,1,0,0,0,58,498,1,0,0,0,60,500,
		1,0,0,0,62,502,1,0,0,0,64,508,1,0,0,0,66,513,1,0,0,0,68,515,1,0,0,0,70,
		517,1,0,0,0,72,537,1,0,0,0,74,551,1,0,0,0,76,560,1,0,0,0,78,568,1,0,0,
		0,80,570,1,0,0,0,82,578,1,0,0,0,84,580,1,0,0,0,86,582,1,0,0,0,88,585,1,
		0,0,0,90,589,1,0,0,0,92,600,1,0,0,0,94,603,1,0,0,0,96,608,1,0,0,0,98,100,
		3,2,1,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,
		1,1,0,0,0,103,101,1,0,0,0,104,123,3,8,4,0,105,123,3,4,2,0,106,123,3,14,
		7,0,107,123,3,12,6,0,108,123,3,16,8,0,109,123,3,6,3,0,110,123,3,18,9,0,
		111,123,3,20,10,0,112,123,3,22,11,0,113,123,3,24,12,0,114,123,3,26,13,
		0,115,123,3,28,14,0,116,123,3,30,15,0,117,123,3,34,17,0,118,123,3,70,35,
		0,119,123,3,10,5,0,120,123,3,72,36,0,121,123,3,46,23,0,122,104,1,0,0,0,
		122,105,1,0,0,0,122,106,1,0,0,0,122,107,1,0,0,0,122,108,1,0,0,0,122,109,
		1,0,0,0,122,110,1,0,0,0,122,111,1,0,0,0,122,112,1,0,0,0,122,113,1,0,0,
		0,122,114,1,0,0,0,122,115,1,0,0,0,122,116,1,0,0,0,122,117,1,0,0,0,122,
		118,1,0,0,0,122,119,1,0,0,0,122,120,1,0,0,0,122,121,1,0,0,0,123,3,1,0,
		0,0,124,126,3,80,40,0,125,124,1,0,0,0,125,126,1,0,0,0,126,130,1,0,0,0,
		127,129,3,78,39,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,
		131,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,133,135,3,82,41,0,134,133,
		1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,138,5,1,0,0,137,139,3,90,45,
		0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,142,5,119,0,0,141,
		143,3,54,27,0,142,141,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,
		3,96,48,0,145,5,1,0,0,0,146,148,3,80,40,0,147,146,1,0,0,0,147,148,1,0,
		0,0,148,152,1,0,0,0,149,151,3,78,39,0,150,149,1,0,0,0,151,154,1,0,0,0,
		152,150,1,0,0,0,152,153,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,155,157,
		3,82,41,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,2,
		0,0,159,161,5,119,0,0,160,162,3,54,27,0,161,160,1,0,0,0,161,162,1,0,0,
		0,162,164,1,0,0,0,163,165,3,42,21,0,164,163,1,0,0,0,164,165,1,0,0,0,165,
		167,1,0,0,0,166,168,3,96,48,0,167,166,1,0,0,0,167,168,1,0,0,0,168,7,1,
		0,0,0,169,171,3,80,40,0,170,169,1,0,0,0,170,171,1,0,0,0,171,175,1,0,0,
		0,172,174,3,78,39,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,
		176,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,178,180,3,82,41,0,179,178,
		1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,5,3,0,0,182,184,5,119,
		0,0,183,185,3,90,45,0,184,183,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,
		186,188,3,54,27,0,187,186,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,
		191,3,42,21,0,190,189,1,0,0,0,190,191,1,0,0,0,191,9,1,0,0,0,192,193,5,
		4,0,0,193,194,3,42,21,0,194,195,5,5,0,0,195,196,3,48,24,0,196,11,1,0,0,
		0,197,199,3,80,40,0,198,197,1,0,0,0,198,199,1,0,0,0,199,203,1,0,0,0,200,
		202,3,78,39,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,
		1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,6,0,0,207,210,5,119,
		0,0,208,209,5,7,0,0,209,211,3,82,41,0,210,208,1,0,0,0,210,211,1,0,0,0,
		211,213,1,0,0,0,212,214,3,42,21,0,213,212,1,0,0,0,213,214,1,0,0,0,214,
		216,1,0,0,0,215,217,3,96,48,0,216,215,1,0,0,0,216,217,1,0,0,0,217,13,1,
		0,0,0,218,220,3,80,40,0,219,218,1,0,0,0,219,220,1,0,0,0,220,224,1,0,0,
		0,221,223,3,78,39,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,
		225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,229,5,8,0,0,228,230,3,
		54,27,0,229,228,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,233,3,42,21,
		0,232,231,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,236,3,96,48,0,235,
		234,1,0,0,0,235,236,1,0,0,0,236,15,1,0,0,0,237,239,3,80,40,0,238,237,1,
		0,0,0,238,239,1,0,0,0,239,243,1,0,0,0,240,242,3,78,39,0,241,240,1,0,0,
		0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,
		243,1,0,0,0,246,247,5,9,0,0,247,248,5,119,0,0,248,250,3,42,21,0,249,251,
		3,96,48,0,250,249,1,0,0,0,250,251,1,0,0,0,251,17,1,0,0,0,252,254,3,80,
		40,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,5,10,0,0,
		256,257,5,119,0,0,257,259,3,44,22,0,258,260,3,96,48,0,259,258,1,0,0,0,
		259,260,1,0,0,0,260,19,1,0,0,0,261,263,3,80,40,0,262,261,1,0,0,0,262,263,
		1,0,0,0,263,264,1,0,0,0,264,265,5,11,0,0,265,266,5,119,0,0,266,267,3,36,
		18,0,267,21,1,0,0,0,268,269,5,12,0,0,269,270,3,48,24,0,270,277,3,42,21,
		0,271,272,5,13,0,0,272,273,3,48,24,0,273,274,3,42,21,0,274,276,1,0,0,0,
		275,271,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,282,
		1,0,0,0,279,277,1,0,0,0,280,281,5,14,0,0,281,283,3,42,21,0,282,280,1,0,
		0,0,282,283,1,0,0,0,283,23,1,0,0,0,284,285,5,15,0,0,285,286,3,48,24,0,
		286,287,3,42,21,0,287,25,1,0,0,0,288,290,5,16,0,0,289,291,3,82,41,0,290,
		289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,3,48,24,0,293,294,
		3,96,48,0,294,295,3,48,24,0,295,296,3,96,48,0,296,297,3,48,24,0,297,298,
		3,96,48,0,298,299,3,42,21,0,299,27,1,0,0,0,300,302,5,17,0,0,301,303,3,
		82,41,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,5,119,
		0,0,305,306,5,18,0,0,306,307,3,48,24,0,307,308,3,42,21,0,308,29,1,0,0,
		0,309,311,5,19,0,0,310,312,3,48,24,0,311,310,1,0,0,0,311,312,1,0,0,0,312,
		314,1,0,0,0,313,315,3,96,48,0,314,313,1,0,0,0,315,316,1,0,0,0,316,314,
		1,0,0,0,316,317,1,0,0,0,317,31,1,0,0,0,318,320,3,80,40,0,319,318,1,0,0,
		0,319,320,1,0,0,0,320,324,1,0,0,0,321,323,3,78,39,0,322,321,1,0,0,0,323,
		326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,324,1,
		0,0,0,327,329,3,82,41,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,
		0,330,331,5,20,0,0,331,333,3,68,34,0,332,334,3,54,27,0,333,332,1,0,0,0,
		333,334,1,0,0,0,334,335,1,0,0,0,335,336,3,42,21,0,336,33,1,0,0,0,337,339,
		5,21,0,0,338,340,3,80,40,0,339,338,1,0,0,0,339,340,1,0,0,0,340,344,1,0,
		0,0,341,343,3,78,39,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,
		344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,3,82,41,0,348,
		350,5,119,0,0,349,351,3,52,26,0,350,349,1,0,0,0,350,351,1,0,0,0,351,353,
		1,0,0,0,352,354,3,44,22,0,353,352,1,0,0,0,353,354,1,0,0,0,354,356,1,0,
		0,0,355,357,3,96,48,0,356,355,1,0,0,0,357,358,1,0,0,0,358,356,1,0,0,0,
		358,359,1,0,0,0,359,35,1,0,0,0,360,364,5,22,0,0,361,363,3,38,19,0,362,
		361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,1,
		0,0,0,366,364,1,0,0,0,367,368,5,23,0,0,368,37,1,0,0,0,369,370,3,40,20,
		0,370,39,1,0,0,0,371,373,3,82,41,0,372,371,1,0,0,0,372,373,1,0,0,0,373,
		374,1,0,0,0,374,376,5,119,0,0,375,377,3,54,27,0,376,375,1,0,0,0,376,377,
		1,0,0,0,377,379,1,0,0,0,378,380,3,96,48,0,379,378,1,0,0,0,380,381,1,0,
		0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,41,1,0,0,0,383,387,5,22,0,0,384,
		386,3,2,1,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,
		0,0,0,388,390,1,0,0,0,389,387,1,0,0,0,390,391,5,23,0,0,391,43,1,0,0,0,
		392,393,5,24,0,0,393,394,3,48,24,0,394,395,5,24,0,0,395,45,1,0,0,0,396,
		398,3,80,40,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,401,
		3,48,24,0,400,402,3,96,48,0,401,400,1,0,0,0,402,403,1,0,0,0,403,401,1,
		0,0,0,403,404,1,0,0,0,404,47,1,0,0,0,405,409,6,24,-1,0,406,408,3,78,39,
		0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,
		413,1,0,0,0,411,409,1,0,0,0,412,414,3,82,41,0,413,412,1,0,0,0,413,414,
		1,0,0,0,414,415,1,0,0,0,415,428,3,50,25,0,416,417,5,123,0,0,417,418,3,
		48,24,0,418,419,5,124,0,0,419,428,1,0,0,0,420,422,3,58,29,0,421,420,1,
		0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,
		425,426,3,48,24,1,426,428,1,0,0,0,427,405,1,0,0,0,427,416,1,0,0,0,427,
		421,1,0,0,0,428,445,1,0,0,0,429,433,10,4,0,0,430,431,3,68,34,0,431,432,
		3,48,24,0,432,434,1,0,0,0,433,430,1,0,0,0,434,435,1,0,0,0,435,433,1,0,
		0,0,435,436,1,0,0,0,436,444,1,0,0,0,437,439,10,2,0,0,438,440,3,60,30,0,
		439,438,1,0,0,0,440,441,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,444,
		1,0,0,0,443,429,1,0,0,0,443,437,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,
		0,445,446,1,0,0,0,446,49,1,0,0,0,447,445,1,0,0,0,448,458,3,66,33,0,449,
		458,3,52,26,0,450,458,5,119,0,0,451,458,3,62,31,0,452,458,3,64,32,0,453,
		458,3,42,21,0,454,458,3,44,22,0,455,458,3,90,45,0,456,458,3,82,41,0,457,
		448,1,0,0,0,457,449,1,0,0,0,457,450,1,0,0,0,457,451,1,0,0,0,457,452,1,
		0,0,0,457,453,1,0,0,0,457,454,1,0,0,0,457,455,1,0,0,0,457,456,1,0,0,0,
		458,51,1,0,0,0,459,461,5,123,0,0,460,462,3,48,24,0,461,460,1,0,0,0,461,
		462,1,0,0,0,462,467,1,0,0,0,463,464,5,121,0,0,464,466,3,48,24,0,465,463,
		1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,
		0,469,467,1,0,0,0,470,471,5,124,0,0,471,53,1,0,0,0,472,473,5,123,0,0,473,
		474,5,25,0,0,474,484,5,124,0,0,475,479,5,123,0,0,476,478,3,56,28,0,477,
		476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,1,
		0,0,0,481,479,1,0,0,0,482,484,5,124,0,0,483,472,1,0,0,0,483,475,1,0,0,
		0,484,55,1,0,0,0,485,487,3,78,39,0,486,485,1,0,0,0,487,490,1,0,0,0,488,
		486,1,0,0,0,488,489,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,491,493,3,
		82,41,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,496,5,119,
		0,0,495,497,5,121,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,57,1,0,0,0,498,
		499,7,0,0,0,499,59,1,0,0,0,500,501,7,1,0,0,501,61,1,0,0,0,502,504,5,119,
		0,0,503,505,3,90,45,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,
		506,507,3,52,26,0,507,63,1,0,0,0,508,509,5,119,0,0,509,510,5,30,0,0,510,
		511,3,48,24,0,511,512,5,31,0,0,512,65,1,0,0,0,513,514,7,2,0,0,514,67,1,
		0,0,0,515,516,7,3,0,0,516,69,1,0,0,0,517,518,5,72,0,0,518,528,3,42,21,
		0,519,523,5,73,0,0,520,521,3,82,41,0,521,522,5,119,0,0,522,524,1,0,0,0,
		523,520,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,527,3,42,21,0,526,
		519,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,532,1,
		0,0,0,530,528,1,0,0,0,531,533,5,74,0,0,532,531,1,0,0,0,532,533,1,0,0,0,
		533,535,1,0,0,0,534,536,3,42,21,0,535,534,1,0,0,0,535,536,1,0,0,0,536,
		71,1,0,0,0,537,538,5,75,0,0,538,539,3,48,24,0,539,543,5,22,0,0,540,542,
		3,74,37,0,541,540,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,
		0,0,544,547,1,0,0,0,545,543,1,0,0,0,546,548,3,76,38,0,547,546,1,0,0,0,
		547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,23,0,0,550,73,1,0,0,0,551,552,
		5,76,0,0,552,553,3,48,24,0,553,557,5,7,0,0,554,556,3,2,1,0,555,554,1,0,
		0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,75,1,0,0,0,559,
		557,1,0,0,0,560,561,5,77,0,0,561,565,5,7,0,0,562,564,3,2,1,0,563,562,1,
		0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,77,1,0,0,0,567,
		565,1,0,0,0,568,569,7,4,0,0,569,79,1,0,0,0,570,571,7,5,0,0,571,81,1,0,
		0,0,572,579,3,86,43,0,573,579,3,90,45,0,574,579,3,88,44,0,575,579,3,92,
		46,0,576,579,3,94,47,0,577,579,3,84,42,0,578,572,1,0,0,0,578,573,1,0,0,
		0,578,574,1,0,0,0,578,575,1,0,0,0,578,576,1,0,0,0,578,577,1,0,0,0,579,
		83,1,0,0,0,580,581,5,110,0,0,581,85,1,0,0,0,582,583,5,122,0,0,583,584,
		5,119,0,0,584,87,1,0,0,0,585,586,5,122,0,0,586,587,3,52,26,0,587,588,5,
		8,0,0,588,89,1,0,0,0,589,590,5,122,0,0,590,595,5,119,0,0,591,592,5,121,
		0,0,592,594,5,119,0,0,593,591,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,
		595,596,1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,599,5,8,0,0,599,91,
		1,0,0,0,600,601,3,86,43,0,601,602,3,90,45,0,602,93,1,0,0,0,603,604,5,123,
		0,0,604,605,3,82,41,0,605,606,5,124,0,0,606,607,5,111,0,0,607,95,1,0,0,
		0,608,609,7,6,0,0,609,97,1,0,0,0,84,101,122,125,130,134,138,142,147,152,
		156,161,164,167,170,175,179,184,187,190,198,203,210,213,216,219,224,229,
		232,235,238,243,250,253,259,262,277,282,290,302,311,316,319,324,328,333,
		339,344,350,353,358,364,372,376,381,387,397,403,409,413,423,427,435,441,
		443,445,457,461,467,479,483,488,492,496,504,523,528,532,535,543,547,557,
		565,578,595
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
